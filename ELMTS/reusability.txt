une template est un bout de code avec
	tag custom
	attributs custom
	content custom
	
closeTag sera a gérer spécifiquement

dans un objet avec tpl
	on continue la récursion interieur :
		- img doivent etre exportées
		- propriétés doivent être extraites (populate {{placeholder}}
		
		
structurer l'interieur d'un elmt réutilisable (coté XD)
	si onpage : structure parfaite 
	sinon : pas très importante, faut juste que les infos dynamiques soit mise en évidence
		on verra plus tard comment
		
		
le css correspondant au positionnement doit etre généré
	margin
	top/left/abs
	flex:0 0 auto
	
on trouvera un moyen générique de différencier : positionnement / autre
	et de subscribe à l'un et/ou l'autre
	

	
__________________________________________________________________
différences entre global / onpage
	onpage doit définir le modèle au moins une fois (définir les sous-calques)
	onpage doit se limiter à ce que le plugin sait faire
	
global, je lui dit de chercher le code ds un fichier texte tout fait	
	mais qd mm de scanner le contenu et de populate les placeholder
	
onpage, je lui dit de créer tout normalement
	pour les suivant:
	je veux encore la structure html (naturellement issue des calques)
	NOTE : ça sous-entend que pour du onpage : on est OBLIGE de bien tout nommer les sous infos ?
	ou alors sur du onpage : 
		je sauvegarde en mémoire le code HTML du première element
		donc plutot que de créer les element suivants en fct de la structure XD, il reprend le code
		CA A L'AVANTAGE D'ETRE GENERIQUE AVEC LE GLOBAL
		
	donc, on créerait dynamiquement, in-memory, une template
		
		
	

	
donc ds la maquete, j'ai un bouton



NIVEAU MARQUAGE :
	ps--*elmt--tpl=btn
	
	si tpl btn existe : global
	sinon : onpage
	
	pour le onpage : le 1er element doit etre complètement définit
	les suivant : seules les infos dynamique doivent etre trouvable
	
	
	
PROCESS TPL_CREATION :
	on rencontre un tpl
		on a ni fichier tpl
		ni in-memory tpl
		=> alors mode "TPL_CREATION"
		
		
	AU CURRENT LEVEL :
	on scanne normalement l'objet
	on divise sa définition CSS en 2
		name => pour le positionement
		tpl => pour le reste
		
	le HTML est construit normalement
		
	on enregistre le bout de code complet in-memory
		comment on sait ou placer les placeholder
		
	on peut pas simplement dire : tous les texts et toutes les imgs sont des placeholder
	ph=?
	ph aurait un double sens :
		- en mode création d'une ONPAGE TPL : il signale la création d'un placeholder sur le TPL
		- en mode lecture (GLOBAL/ONPAGE) : il signale une valeur du model à associer au placeholder TPL
	
	
	
	

PROCESS TPL_READING
	le process de lecture est sensé être identique GLOBAL et ONPAGE
	le CSS ne définit que le positionnement (SUR LE CURRENT LEVEL)
	le HTML est copié de la template
	la recursion est en mode "TPL_READING" => ne recherche que des placeholder à associer au template
	
	export :
		si reading : uniquement les ph
		sinon : tout
		si !reading || ph
	
	
	if mode == read on CURRENT LEVEL
		only positionning
		
	if mode == read
		no recursion (css and html)
	
	if mode == write
		everything normal i guess
	
	if create
		=> both separately
	if read
		=> only position
		
	
	
	
PLACEHOLDER

de quelles natures peuvent etre les placeholder ?
- img (path)
- svg-inline
- txt

- color (moins important)

si je place sur une image
-ph=icon1
implicitement, on sait que {{icon1}} va valoir le PATH

mais sur une shape mnt : 
-ph=color1
comment on sait que {{color1}} va valoir la COLOR et pas la TRANSPARENCE (exemple merdique mais bon)


comment on caracterise un placeholder
- elmt only ?
- elmt + id ? (path, value)

implications :
mode creation : en placant ph=x sur image : je dis que le placeholder devra etre dans src
donc telle quel : on ne permet d'enregistrer qu'une valeur de placeholder par element, qu'on choisit arbitrairement par défaut
j'pense que c'est ok



______________________
IMG SRC va etre important
	pour les path image, comment on gere ?
	avec la methode background-img actuelle : 
	"population" du placeholder se fait coté CSS
	c'est un vrai problème !!!

conflit type=img /tag=img
	type=img est important à garder
	enlever les raccourci sur type (on s'en sert jms kazi)
	tag=img
	=> genere un traitement particulier => ajoute attribut src
	traitement générique des attributs.


	
	
	
	
DEFINITION DES INFOS DYNAMIQUES

	permettre un max de confort
	possibilité de définir le nom du placeholder
		--ph=zer
		sinon utiliser le type {{img}} {{txt}}
		
	idéalement, pas avoir a nommer ps-- les container 
		qd on est ds un tpl => recursion auto si type = cont
		
	



__________________________________________________________________
TODO


mode creation (tplmodel)												OK

	probleme de nommage interne sur les &-name coté template
	il prend comme base le name, il devrait prendre le tpl


img src																	OK
	an img with PH passe automatiquement en <img>
	ou alors message d'erreur
	
DELETE DEPRECATED :														OK
	- class
	- !export
	(from doc also)
	
METTRE DOC A JOUR														OK

EXEMPLES
	QUIZZ
		pourquoi sur quiz1 : flex:0 0 auto;								laisse de coté (va ptet changer)
		quiz2/3, titre nl2br pas prise en compte						OK
		si on nomme pas => generated name à l'envers...					OK
		
	check if don't name filename => conflict export ?					OK
	
	bug chelou, si on rajoute 'AA' au debut de generateItemName			OK
		on a un comportement bizarre
		=> 'AAAA...'
		investiguer
		
	+3 examples
		puces avec svg-inline			OK
		puces avec svg					OK
		ph sur model text				OK
		ph sur model img				OK
	
	tester integration html				OK
	tester avec file template			OK
	
	
	
	if ph sur img => <img auto											OK
		dans tplmodel (l'autre c'est pas util)
		test sur quizzitem
		
	si ph dans tpl														OK
		et que ph tplmodel défini
		on peut reprendre le mm type que le ph model
		bibliotheque d'item stockés 
		
	
	export file
		si tplmodel
		genere un dossier tpl avec tous les fichiers par tpl
		avec " {{classes}}"
		avec les placeholder la ou il faut
		avec le bon filename.txt
		
		
		
		
__________________________________________________________________
EXEMPLES
tout tester en global puis onpage (boolean pour disable le test d'existence)


boutons avec icons

<button class="btn {{classes}}">
	{{text}}
	<img src="{{path_img}} />
</button>

=> fichier avec plusieurs boutons, mais différentes texts / icons


linesep (cobra zero)
	(img = root elmt, not child)
	ne plus utiliser !exportées
	ps--*sep1--tpl=linesep
	


masterclass-item
	1 img fixe
	1 img dyn
	plusieurs texts


puces de la frise

svg-inline
PH sur tplmodel






